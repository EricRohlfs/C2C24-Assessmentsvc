// <auto-generated />
using Assessmentsvc.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Assessmentsvc.Database.Migrations
{
    [DbContext(typeof(AssessmentsContext))]
    [Migration("20180207180728_MakeRawscoreNormalizedScoreOptional2")]
    partial class MakeRawscoreNormalizedScoreOptional2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Assessmentsvc.Database.Entity.AssessmentComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Equipment");

                    b.Property<string>("Facility");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Ordnance");

                    b.Property<string>("Overall");

                    b.Property<string>("Personnel");

                    b.Property<string>("Supply");

                    b.Property<string>("Training");

                    b.HasKey("Id");

                    b.ToTable("AssessmentComments");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConditionDescriptorId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Number");

                    b.Property<Guid?>("TaskId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ConditionDescriptorId");

                    b.HasIndex("TaskId");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.ConditionDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("ConditionDescriptors");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.Measure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Number");

                    b.Property<string>("Scale");

                    b.Property<Guid?>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.Mission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.RespOrg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RespOrgs");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<Guid?>("MissionId");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Number");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("MissionId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.Property<string>("Uic");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.UnitMissionAssessment", b =>
                {
                    b.Property<Guid>("UnitId");

                    b.Property<Guid>("MissionId");

                    b.Property<bool>("Approved");

                    b.Property<Guid?>("CommentId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DateAssessed");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Rating");

                    b.HasKey("UnitId", "MissionId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("MissionId");

                    b.ToTable("UnitMissionAssessments");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.UnitMissionResourceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<bool>("Complete");

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("MissionId");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("NormalizedScore");

                    b.Property<string>("Rating");

                    b.Property<int?>("RawScore");

                    b.Property<string>("Source");

                    b.Property<Guid?>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("MissionId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitMissionResourceStatusData");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.UnitResourceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<bool>("Complete");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("NormalizedScore");

                    b.Property<string>("Rating");

                    b.Property<int?>("RawScore");

                    b.Property<Guid>("ResourceStatusAmplificationID");

                    b.Property<string>("Source");

                    b.Property<Guid?>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitResourceStatusData");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.UnitTaskAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Approved");

                    b.Property<Guid?>("CommentId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DateAssessed");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Rating");

                    b.Property<Guid?>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("TaskId");

                    b.ToTable("METAssessments");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.Condition", b =>
                {
                    b.HasOne("Assessmentsvc.Database.Entity.ConditionDescriptor", "ConditionDescriptor")
                        .WithMany()
                        .HasForeignKey("ConditionDescriptorId");

                    b.HasOne("Assessmentsvc.Database.Entity.Task")
                        .WithMany("Conditions")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.Measure", b =>
                {
                    b.HasOne("Assessmentsvc.Database.Entity.Task")
                        .WithMany("Standards")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.Task", b =>
                {
                    b.HasOne("Assessmentsvc.Database.Entity.Mission")
                        .WithMany("Met")
                        .HasForeignKey("MissionId");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.UnitMissionAssessment", b =>
                {
                    b.HasOne("Assessmentsvc.Database.Entity.AssessmentComment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("Assessmentsvc.Database.Entity.Mission", "Mission")
                        .WithMany("UnitMissionAssessments")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Assessmentsvc.Database.Entity.Unit", "Unit")
                        .WithMany("UnitMissionAssessments")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.UnitMissionResourceStatus", b =>
                {
                    b.HasOne("Assessmentsvc.Database.Entity.Mission", "Mission")
                        .WithMany()
                        .HasForeignKey("MissionId");

                    b.HasOne("Assessmentsvc.Database.Entity.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.UnitResourceStatus", b =>
                {
                    b.HasOne("Assessmentsvc.Database.Entity.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("Assessmentsvc.Database.Entity.UnitTaskAssessment", b =>
                {
                    b.HasOne("Assessmentsvc.Database.Entity.AssessmentComment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("Assessmentsvc.Database.Entity.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");
                });
#pragma warning restore 612, 618
        }
    }
}
